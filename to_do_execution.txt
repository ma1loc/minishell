## learn about external functoins.
    readline, rl_clear_history, rl_on_new_line,
    rl_replace_line, rl_redisplay, add_history,
    printf, malloc, free, write, access, open, read,
    close, fork, wait, waitpid, wait3, wait4, signal,
    sigaction, sigemptyset, sigaddset, kill, exit,
    getcwd, chdir, stat, lstat, fstat, unlink, execve,
    dup, dup2, pipe, opendir, readdir, closedir,
    strerror, perror, isatty, ttyname, ttyslot, ioctl,
    getenv, tcsetattr, tcgetattr, tgetent, tgetflag,
    tgetnum, tgetstr, tgoto, tputs

## [readline]
    readline will read a line from the terminal and return it, using
    prompt as a prompt.  If prompt is NULL or the empty string, no
    prompt is issued.  The line returned is allocated with malloc(3);
    the caller must free it when finished.  The line returned has the
    final newline removed, so only the text of the line remains.

## [rl_clear_history] rl_clear_history(); // Erases all stored commands from history
    Function: void rl_clear_history (void)
    Clear the history list by deleting all of the entries, in the same manner as the History
    library’s clear_history() function. This differs from clear_history because it frees private
    data Readline saves in the history list.
    >>> summary
    
    The rl_clear_line() function clears the history list by deleting all of the entries. 
    The rl_clear_line() function frees data that the readline library saves in the histroy list.

## [rl_on_new_line] rl_on_new_line(); // Resets Readline's internal state to start a fresh input line (ctrl + c)

## [chdir]
    Changing the current working directory
    The chdir() system call changes the calling process’s current working directory to
    the relative or absolute pathname specified in pathname (which is dereferenced if it
    is a symbolic link).

## [stat]
    give you the same thing about the access can do buit with extra info like -> type, size, permission, etc.

## [lstat]
    lstat() is used for symbolic links, while stat() follows the link.

## [fstat]
    fstat() works with file descriptors, while stat() works with file paths.

## [unlink]
    unlink() removes a file from the filesystem. If the file is open, its data remains accessible until all processes close it.

## [perror && strerror]
    perror(): Directly prints to stderr.
    strerror(): Returns the error message string, and you must print it (typically using printf()), which will print to stdout.

## [isatty]
    You can use isatty() to check if the shell's input or output is connected to a terminal

>>> structur example <<<
minishell/
│── includes/
│   ├── minishell.h        # Main header file (structures, prototypes)
│   ├── lexer.h            # Tokenization (lexer)
│   ├── parser.h           # Parsing & AST construction
│   ├── executor.h         # Execution of commands
│── srcs/
│   ├── main.c             # Entry point (loop, readline)
│   ├── lexer/             # Tokenization (splitting input)
│   │   ├── lexer.c        # Tokenization logic
│   │   ├── tokenizer.c    # Handle quotes, operators, etc.
│   │   ├── expand.c       # Expand variables ($PATH, $HOME)
│   ├── parser/            # Parsing logic (build AST)
│   │   ├── parser.c       # Convert tokens to command structures
│   │   ├── syntax_check.c # Handle syntax errors
│   ├── executor/          # Command execution
│   │   ├── executor.c     # Execute parsed commands
│   │   ├── builtins.c     # Handle built-in commands (cd, echo, export)
│   │   ├── redirections.c # Handle `<`, `>`, `>>`, `<<`
│   │   ├── pipes.c        # Handle `|` (pipex knowledge helps here)
│   ├── env/               # Environment variables
│   │   ├── env.c          # Manage env variables (`export`, `unset`)
│   ├── signals/           # Signal handling (CTRL+C, CTRL+D, CTRL+Z)
│── libft/                 # Your custom libft functions
│── Makefile               # Compilation rules
│── README.md              # Documentation


## links to read form
Bash Reference Manual -> https://www.gnu.org/software/bash/manual/bash.html
Shell Command Language -> https://pubs.opengroup.org/onlinepubs/9699919799.2013edition/utilities/V3_chap02.html#tag_18